#!/bin/perl
# illustrates perl escape sequences

use strict;

my $input ;

print "\\t:   \'\t\'","\n";
$input = <STDIN>;
print "\\n:   \'\n\'","\n";
$input = <STDIN>;
print "\\r:   \'\r\'","\n";
$input = <STDIN>;
print "\\b:   \'\b\'","\n";
$input = <STDIN>;
print "\\a:   \'\a\'","\n";
$input = <STDIN>;
print "\\x{3F}:    \'\x{3F}\'","\n";
print "\n";

#!/bin/perl -w

# bp 62

print 'print "less than $filethreshold files in this directory\n" if $filecount < $filethreshold;' . "\n";
print 'print "more than $filethreshold files in this dir\n" unless $filecount < $filethreshold;' . "\n";
print 'print "files exist in this directory\n" if $filecount;' . "\n";
print "\n";

system("command ls | wc | cut -c0-11 > golf.txt");
my $filecount = 0;
open (F1, "< golf.txt");
while (<F1>) {
  $filecount = $_;
}
print "Enter your file threshold: ";
chomp(my $filethreshold = <STDIN>);

print "less than $filethreshold files in this directory\n" if $filecount < $filethreshold;
print "more than $filethreshold files in this dir\n" unless $filecount < $filethreshold;
print "files exist in this directory\n" if $filecount;
print "\n";
#!/bin/perl -w

# bp 62

print "\n". 'die "you entered zero\n" unless $nbr;' . "\n\n";

print "enter a number or string: ";
chomp(my $nbr = <STDIN>);
die "you skipped the step, hence abort\n" unless $nbr;
if ($nbr) {
  print "your program reached this point\n"
}
#!/bin/perl

use strict;

my $line = "";
my $MaxLine = "";
my $PageNbr = 0;
my $MaxPage = 0;

system("grep 'bp ' *.pl > golf.txt");
#open (F1, system("grep 'bp ' *.pl|");
open (F1, "< golf.txt") ;
while (<F1>) {
  $line = $_;
  $PageNbr = substr($line,length($line)-4,4);
  $PageNbr += 0;
#  print $line . "\t" . $PageNbr. "\n"; ####
  if ($PageNbr > $MaxPage) {
    $MaxPage = $PageNbr; 
    $MaxLine = $line;
  }
}
print "Highest Page = ", $MaxPage, "\n";
print "Line is: ", $MaxLine, "\n";
print "hello, world\n";
#!/bin/perl -w

# bp 80

use strict;

my @seasons = qw/winter spring summer fall/;
my $i;

for ($i = 0; $i < 4; $i++) {
  print $seasons[$i] . "\n";
}

my @coins = qw#penny nickel dime quarter#;

while (my $coin = shift(@coins)) {
  print $coin . "   ";
}

#!/bin/perl -w

# bp 63

use strict;

print "\n" . '$str1 or die "you didn\'t enter a string: ";';
print "\n" . '$str1 and print "you entered \'$str1\'\n";' . "\n\n";

print "enter a string: ";
chomp(my $str1 = <STDIN>);

print "\n";

$str1 or die "you didn't enter a string: ";

$str1 and print "you entered '$str1'\n";

print "\n";
  
#!/bin/perl -w

# bp 97

use strict;

my @sales = (69, 118, 97, 110, 103, 101, 108, 105, 76, 111, 118, 101);
my @months = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);

print "\n\n";
print "Second quarter sales:\n";
print "@months[3..5]\n@sales[3..5]\n";
my @q2 = @sales[3..5];
print "\n";

#Incorrect results in May, Aug, Oct, Nov and Dec!

print 'revise array values: @sales[4, 7, 9..11] = (68, 101, 114, 111, 117);' . "\n";
@sales[4, 7, 9..11] = (68, 101, 114, 111, 117);
print "\n";

#Swap Apr and May

print 'swap array values: @months[3, 4] = @months[4, 3];' . "\n";
@months[3, 4] = @months[4, 3];
print "\n";
#!/bin/perl -w

# bp 91

use strict;

print "\n";
print 'my @array1 = (1, 2, 3);' . "\n";
print '@array2 = (@array1, 4, 5, 6);' . "\n";
print "\n";
my @array1 = (1, 2, 3);
my @array2;
@array2 = (@array1, 4, 5, 6);
print "\@array2: @array2\n";

print "\n";
print '@array2 = (3, 5, 7, 9);' . "\n";
print '@array2 = (1, @array2, 11);' . "\n";
print "\n";
@array2 = (3, 5, 7, 9);
@array2 = (1, @array2, 11);
print "\@array2: @array2\n";
print "\n";
#!/bin/perl
# bp 22

print "\n";
print 'print 69 + 118' . "\n\n";
print 69 + 118, "\n\n";
#!/bin/perl
# bp 22

print "\n";
print 'print "21 from 25 is: ", 25 - 21' . "\n";
print "21 from 25 is: ", 25 - 21, "\n";
print "\n";
print 'print "4 + 13 - 7 is: ", 4 + 13 - 7' . "\n";
print "4 + 13 - 7 is: ", 4 + 13 - 7, "\n";
print "\n";
#!/bin/perl
# bp 22

print "\n";
print 'print "7 times 15 is: ", 7 * 15' . "\n";
print "7 times 15 is: ", 7 * 15, "\n";
print "\n";
print 'print "249 divided by 3 is: ", 249 /3' . "\n";
print "249 divided by 3 is: ", 249 /3, "\n";
print "\n";
#!/bin/perl
# bp 22

print "\n";
print 'print "3 plus 7 times 15 is: ", 3 + 7 * 15' . "\n";
print "3 plus 7 times 15 is: ", 3 + 7 * 15, "\n";
print "\n";
#!/bin/perl -w
# bp 23

print "\n";
print 'print "(3 plus 7) times 15 is: ", (3 + 7) * 15' . "\n";
print "(3 plus 7) times 15 is: ", (3 + 7) * 15, "\n";
print "\n";
print 'print (3 + 7) * 15' . "\n";
print (3 + 7) * 15, "\n";
print "\n\n";
#!/bin/perl -w
# bp 23

print "\n";
print 'print ((3 + 7) * 15)' . "\n";
print ((3 + 7) * 15, "\n");
print "\n\n";
#!/bin/perl
# bp 23

print "\n";
print '2**4, " ", 3**5, " ", -2**4' . "\n";
print 2**4, " ", 3**5, " ", -2**4, "\n\n";
print '(-2)**4' . "\n";
print (-2)**4;
print "\n\n";
#!/bin/perl
# bp 24

print "\n";
print "15 divided by 6 (15 / 6) is exactly ", 15 / 6, "\n";
print "That's a remainder of 15 % 6 or ", 15 % 6, "\n";
print "\n";
#!/bin/perl -w

# bp 89

use strict;

my @array1;
my $scalar1;

print "\n\n";
@array1 = qw{Monday Tuesday Wednesday Thursday Friday Saturday Sunday};
$scalar1 = @array1;
print "Array 1 is @array1\n";
print '$scalar1 = @array1;' . "\n";
print "Scalar 1 is $scalar1\n";
print "\n";

my @array2;
my $scalar2;

print "\n";
@array2 = qw[Winter Spring Summer Autumn];
$scalar2 = @array2;
print "Array 2 is @array2\n";
print '$scalar2 = @array2;' . "\n";
print "Scalar 2 is $scalar2\n";
print "\n";
#!/bin/perl -w

print "\n'\$ perl -w <filename>.pl' will run the program complete with warnings\n";
print "\n";
print "A # has ASCII value ord('#') or ", ord('#'), "\n";
print "\n";
print "A * has ASCII value ord(\"*\") or ", ord("*"), "\n";
print "\n";
#!/bin/perl -w
# bp 18

print 'print \'ex\\\\ er\\\\\', \' ci\\\' se\\\'', "\n";
print 'ex\\ er\\', ' ci\' se\'', "\n";
#!/bin/perl - w

# bp 91

use strict;

my $scalar0;
my $scalar1;
my $scalar2;

print "\n\n";
print 'my @array = (10, 20, 30);' . "\n";
print '($scalar0, $scalar1, $scalar2) = @array;' . "\n";
print "\n";
my @array = (10, 20, 30);
($scalar0, $scalar1, $scalar2) = @array;

print "\$scalar0 is $scalar0\n";
print "\$scalar1 is $scalar1\n";
print "\$scalar2 is $scalar2\n";
print "\n";
#!/bin/perl -w

# bp 39

print "\n";
$a = 4;
$b = 10;
print "Our variables are \$a: ", $a, " and \$b: ", $b, "\n";
print "\n";
print "\$b = \$a++\n";
$b = $a++;
print "After incrementing, we have \$a: ", $a, " and \$b: ", $b, "\n";
print "\n";
print "\$b = ++\$a * 2\n";
$b = ++$a * 2;
print "Now, we have \$a: ", $a, " and \$b: ", $b, "\n";
print "\n";
print "\$a = --\$b + 4\n";
$a = --$b + 4;
print "Finally, we have \$a: ", $a, " and \$b: ", $b, "\n";
print "\n";
#!/bin/perl -w

# bp 40

print "\n";
$a = "A9"; print "++\$a where \$a = 'A9': ", ++$a, "\n";
$a = "bz"; print "++\$a where \$a = 'bz': ", ++$a, "\n";
$a = "Zz"; print "++\$a where \$a = 'Zz': ", ++$a, "\n";
$a = "z9"; print "++\$a where \$a = 'z9': ", ++$a, "\n";
$a = "9z"; print "++\$a where \$a = '9z': ", ++$a, "\n";
print "\n";
#!/bin/perl
# bp 20

print "\nyou can also do: $ /bin/perl autoconvert.pl\n\n";

print 'print "0.25" * 4'."\n\n";
print "0.25" * 4, "\n";
print "\n";
#!/bin/perl -w

# bp 84

use strict;

my $month = -1;

print "\n";
print "Month # ", $month, " is: ";
print qw(
	January	February	March
	April	May		June
	July	August		September
	October	November	December
        )[$month];
print "\n\n"
#!/bin/perl - w

# bp 87

use strict;

my @days;

print "\n";
print '@days = qw@Monday Tuesday Wednesday Thursday Friday Saturday Sunday@;', "\n";
print 'undeclared: $days = 31;' . "\n";
print "\n";

@days = qw@Monday Tuesday Wednesday Thursday Friday Saturday Sunday@;
$days = 31;

print "\n";
#!/bin/perl - w

# bp 87

use strict;

my @days;
my $days;

print "\n";
print '@days = qw@Monday Tuesday Wednesday Thursday Friday Saturday Sunday@;', "\n";
print 'declared: $days = 31;' . "\n";
print "\n";

@days = qw@Monday Tuesday Wednesday Thursday Friday Saturday Sunday@;
$days = 31;

print "\@days: ", @days, "\n";
print "\$days: ", $days, "\n";

print "\n";
#!/bin/perl -w

# bp 92

use strict;

print "\n";
print 'my @array = (1, 3, 5, 7, 9);' . "\n";
print 'print @array[1];' . "\n";
print "\n";
my @array = (1, 3, 5, 7, 9);
print @array[1];
print "\n\n";
#!/bin/perl -w

# bp 114

use strict;

print "\n\n";
print 'my %where = (' . "\n";
print '	Lucy =>    "Exeter",' . "\n";
print "\n";

my %where = (
	Gary =>    "Dallas",
	Lucy =>    "Exeter",
	Ian  =>    "Reading",
	Samanth => "Oregon"
);

print 'delete $where{Lucy};' . "\n";
print 'print "Lucy lives in $where{Lucy}\n";' . "\n";
print "\n";

delete $where{Lucy};
print "Lucy lives in $where{Lucy}\n";
print "\n";
#!/bin/perl -w
# bp14

print ' 255, 0378,	 0b11111112, 0xFG', "\n";	
print 255,		"\n";
print 0378,		"\n";
print 0b11111112,	"\n";
print 0xFG,		"\n";
#!/bin/perl
# bp 25

print "\n";
print "51 ANDed with 85 (51 & 85, or 85 & 51) gives us: ", 51 & 85, "\n";
print "\n";
print "51 ORed with 85 (51 | 85, or 85 | 51) gives us: ", 51 | 85, "\n";
print "\n";
print "51 XORed with 85 (51 ^ 85, or 85 ^ 51) gives us: ", 51 ^ 85, "\n";
print "\n";
#!/bin/perl
# bp 26

print "\n";
print "We are using 64-bit\n";
print "\n";
print "NOT 85 (~85) is ", ~85, "\n";
print "\n";
print "2**30 in decimal                     ", 2**30, "\n";
print "2**30 in octal, oct(2**30) is        ", oct(2**30), "\n";
print "NOT 2**30 in octal, oct(~(2**30)) is ", oct(~(2**30)), "\n";
print "\n";
#!/bin/perl -w
# bp 27 

print "\nCan run this with the /bin/perl prefix\n";
print "\n";
print "Is two equal to four ?    '", 2 == 4, "'\n";
print "OK, is six equal to six ? '", 6 == 6, "'\n";
print "\n";
#!/bin/perl -w
# bp 28

print "\n";
print "So, two is not equal to four (2 != 4) ? ", 2 != 4, "\n";
print "\n";
#!/bin/perl
# bp 28

print "\n";
print "Fix is more than six (5 > 6) ? '", 5 > 6, "'\n";
print "\n";
print "Seven is less than sixteen (7 < 16) ? '", 7 < 16, "'\n";
print "\n";
print "Two is equal to two (2 == 2) ? '", 2 == 2, "'\n";
print "\n";
print "One is more than one (1 > 1) ? '", 1 > 1, "'\n";
print "\n";
print "Six is not equal to seven (6 != 7) ? '", 6 != 7, "'\n";
print "\n";
#!/bin/perl
# bp 29

print "\n";
print "Seven is less than or equal to sixteen (7 <= 16) ? '", 7 <= 16, "'\n";
print "\n";
print "Two is more than or equal to two (2 >= 2) ? '", 2 >= 2, "'\n";
print "\n";
#!/bin/perl
# bp 29

print "\n";
print "Compare six and nine (6 <=> 9) ? '", 6 <=> 9, "'\n";
print "\n";
print "Compare seven and seven (7 <=> 7) ? '", 7 <=> 7, "'\n";
print "\n";
print "Compare eight and four (8 <=> 4) ? '", 8 <=> 4, "'\n";
print "\n";
#!/bin/perl
# bp 30

print "\n";
print "Test one: 6 > 3 && 3 > 4  '", 6 > 3 && 3 > 4 , "'\n";
print "\nkeyword and has lower precedence than other print arguments\n";
print "Test two: 6 > 3 and 3 > 4 '", 6 > 3 and 3 > 4 , "'\n";
print "\n";
print ("Test two: 6 > 3 and 3 > 4 '", 6 > 3) and (3 > 4 , "'\n");
print "\n\n"; 
#!/bin/perl -w

# bp 121

use strict;

print "\n\n";
print 'my %colors = (' . "\n";
print '	red    => \'#FF0000\',' . "\n";
print 'print "Red is    $colors{red}";' . "\n";
print "\n";

my %colors = (
	red    => '#FF0000',
	green  => '#00FF00',
	blue   => '#0000FF',
	white  => '#FFFFFF',
	black  => '#000000',
	purple => '#520063'
);

print "Red is    $colors{red}\n";
print "Blue is   $colors{blue}\n";
print "Purple is $colors{purple}\n";

print "\n";
#!/bin/perl -w

use strict;

my $outfile = "perlFileContents.txt";
my $line = "";

open(F2,">golf2.unx");
print F2 "rm $outfile\n";
close F2;

open(F1, "command ls *.pl|");
open(F2, ">> golf2.unx");
while (<F1>) {
  $line = $_;   ####
  $line = substr($line,0,length($line)-1);
  print F2 "cat ", $line, " >> $outfile\n";
}
#system("vi golf2.unx"); ####
system("chmod 777 golf2.unx; ./golf2.unx");
print "Output file is $outfile\n";
close F2;
close F1;
#!/bin/perl -w

# bp 123

use strict;

print "\n\n";
print 'my @names = qw(' . "\n";
print '	John	Sue	Larry' . "\n";
print '	Mary	John	Mary' . "\n";
print '	Larry	John	Joe' . "\n";
print '	Lisa	John	Mary' . "\n";
print ');' . "\n";
print "\n";
print 'my %count;' . "\n";
print '' . "\n";
print 'foreach (@names) {' . "\n";
print '  if (exists $count{$_}) {' . "\n";
print '    $count{$_}++;' . "\n";
print '  } else {' . "\n";
print '    $count{$_} = 1;' . "\n";
print '  }' . "\n";
print '}' . "\n";
print '' . "\n";
print 'foreach (keys %count) {' . "\n";
print '  print "$_ occurs $count{$_} time(s) \n";' . "\n";
print '}' . "\n";
print "\n";

print 'Press <Ent> to cont'; my $pause = <STDIN>;
print "\n";

my @names = qw(
	John	Sue	Larry
	Mary	John	Mary
	Larry	John	Joe
	Lisa	John	Mary
);

my %count;

foreach (@names) {
  if (exists $count{$_}) {
    $count{$_}++;
  } else {
    $count{$_} = 1;
  }
}

foreach (keys %count) {
  print "$_ occurs $count{$_} time(s) \n";
}

print "\n";
#!/bin/perl -w

# bp 104

use strict;

print "\n\n";
print'my @count = (1..5);' . "\n";
print 'foreach (reverse(@count)) {' . "\n";
print '  print "$_...\n";' . "\n";
print "\n";

my @count = (1..5);

foreach (reverse(@count)) {
  print "$_...\n";
  sleep 1;
}
print "Blast Off!\n";

print "\n";
#!/bin/perl -w

# bp 46

use strict;

print "\n";
print "you may make more readable numeric constant scalars with underscores--perl discards them\n\n";

my $yen = 105.6;   # as of 2 Feb 2004

print '"49,518 yen is ", (49_518/$yen), " dollars' . "\n";
print "\n";
print "49,518 yen is ", (49_518/$yen), " dollars\n";
print "   360 yen is ", (360/$yen), " dollars\n";
print "30,510 yen is ", (30_150/$yen), " dollars\n";
print "\n";
#!/bin/perl -w

# bp 47

use strict;

print "\n";
print "note use of <STDIN>\n";
print "\n";

print 'my $yen = <STDIN>' . "\n";
print 'chop($yen) would knock off the last character' . "\n";
print 'chomp($yen) knocks off only the last char if a newline' . "\n";
print "\n";

print "Currency converter\n\nPlease enter the exchange rate: ";
my $yen = <STDIN>;
chomp($yen);
print "\n";

print '"49,518 yen is ", (49_518/$yen), " dollars' . "\n";
print "\n";
print "49,518 yen is ", (49_518/$yen), " dollars\n";
print "   360 yen is ", (360/$yen), " dollars\n";
print "30,510 yen is ", (30_150/$yen), " dollars\n";
print "\n";
#!/bin/perl - w

# bp 87

use strict;

my @days;

print "\n";
print '@days = qw@Monday Tuesday Wednesday Thursday Friday Saturday Sunday@;', "\n";
print "\n";

@days = qw@Monday Tuesday Wednesday Thursday Friday Saturday Sunday@;
print @days, "\n";

print "\n";
#!/bin/perl

# bp 57

use strict;

print "\n" . 'my ($a, $b);' . "\n";
print '$b = 10;' . "\n";
print 'if (defined $a) {' . "\n";
print 'if (defined $b) {' . "\n\n";

my ($a, $b);
$b = 10;

if (defined $a) {
  print "\$a has a value.\n";
}
if (defined $b) {
  print "\$b has a value.\n";
}
print "\n";
#!/bin/perl

# bp 49

use strict;

print "\n";
print "Please enter a string to pass to die: ";
chomp(my $string = <STDIN>);
print "\n";

print 'die($string)' . "\n";
print "\n";
die($string);
print "\n";
print "didn't make it this far...\n";
#!/bin/perl -w

# bp 119

use strict;

print "\n\n"; 
print 'my %where = (' . "\n";
print '	Gary     => "Dallas",' . "\n";
print '	Lucy     => "Exeter",' . "\n";
print '	Ian      => "Reading",' . "\n";
print '	Samantha => "Oregon"' . "\n";
print ');' . "\n";
print "\n"; 
print 'my($k, $v);' . "\n";
print 'while (($k, $v) = each %where) {' . "\n";
print '  print "$k lives in $v\n";' . "\n";
print '}' . "\n";
print "\n"; 


my %where = (
	Gary     => "Dallas",
	Lucy     => "Exeter",
	Ian      => "Reading",
	Samantha => "Oregon"
);

my($k, $v);
while (($k, $v) = each %where) {
  print "$k lives in $v\n";
}

print "\n"; 
#!/bin/perl -w

# bp 103

use strict;

print "\n\n";
print 'my @array = qw:alpha bravo charlie delta:;' . "\n";

my @array = qw:alpha bravo charlie delta:;

print 'print "Scalar value : ", scalar(@array), "\n";' . "\n";
print 'print "Highest index: ", $#array, "\n";' . "\n";
print "\n";

print "Scalar value : ", scalar(@array), "\n";
print "Highest index: ", $#array, "\n";

print "\n";
#!/bin/perl -w

# bp 120

use strict;

print "\n\n"; 
print 'my %where = (' . "\n";
print '	Gary     => "Dallas",' . "\n";
print '	Lucy     => "Exeter",' . "\n";
print '	Ian      => "Reading",' . "\n";
print '	Samantha => "Oregon"' . "\n";
print ');' . "\n";
print 'print "Gary exists in the hash!" if exists $where{Gary};' . "\n";
print "\n"; 

my %where = (
	Gary     => "Dallas",
	Lucy     => "Exeter",
	Ian      => "Reading",
	Samantha => "Oregon"
);

print "Gary exists in the hash!\n" if exists $where{Gary};
print "Larry exists in the hash!\n" if exists $where{Larry};

print "\n\n"; 
print 'my @seasons = qw(Winter Spring Summer Fall);' . "\n";
print 'if ((exists $seasons[3]) && !(exists $seasons[4])) {' . "\n";
print '  print "There are 4 seasons" ' . "\n";
print "\n"; 

my @seasons = qw(Winter Spring Summer Fall);
if ((exists $seasons[3]) && !(exists $seasons[4])) {
  print "There are 4 seasons\n" 
}

print "\n"; 
#!/bin/perl -w

#bp 48

use strict;

print "\n";
print "after running this, type: \$ echo \$? to get the number in base 256\n\n";

print 'chomp(my $value = <STDIN>)' . "\n";
print "\n";
print "enter value to return to the calling program: ";
chomp(my $value = <STDIN>);
print "\n";

exit($value);

#!/bin/perl

use strict;

my $path = "";

if ($#ARGV == -1) {
  $path = ".";
}
else {
  $path = @ARGV[0];
  if ($path =~ /\//i) {
    $path =~ s/\//\\/g;
  }
}
print "path = $path\n";   ####

system("'c:/windows/explorer.exe' '$path'");
#!/bin/perl -w

# bp 68

use strict;

my $number;

print "\n" . 'foreach $number (1..10) {' . "\n\n";

foreach $number (1..10) {
  print "the number is: $number\n";
}
print "\n";
#!/bin/perl -w

# bp 99

use strict;

my $element;

print "\n\n";
print "foreach \$element ('zero', 'one', 'two') {\n\n";

foreach $element ('zero', 'one', 'two') {
  print "the element is: $element\n";
}
print "\n";
#!/bin/perl -w

# bp 99

@array = qw,America Asia Europe Africa,;
my $element;

print "\n\n";
print 'foreach $element (@array) {', "\n\n";

foreach $element (@array) {
  print $element . "\n";
}
print "\n";
#!/bin/perl -w

# bp 100

use strict;

my @array = (1, 3, 5, 7, 9);

print "\n\n";
print 'foreach my $i (@array) {' . "\n\n";
foreach my $i (@array) {
  print "odd nbr: $i\n";
}
print "\n";
#!/bin/perl -w

# bp 100

use strict;

print "\n\n";
print 'my @array = (1, 3, 5, 7, 9);' . "\n";
print 'my $i = \'hello there\';' . "\n";
print 'foreach $i (@array) {' . "\n";
print '  print "odd nbr: $i\n";' . "\n";
print '}' . "\n";
print 'print "All done: $i\n";' . "\n";
print "\n";

my @array = (1, 3, 5, 7, 9);
my $i = 'hello there';
foreach $i (@array) {
  print "odd nbr: $i\n";
}
print "All done: $i\n";
print "\n";
#!/bin/perl -w

# bp 101

use strict;

print "\n\n";
print 'my @array = (10, 20, 30, 40);' . "\n";
my @array = (10, 20, 30, 40);

print "Before: @array\n";

print "\n";
print 'foreach (@array) {' . "\n";
print '  $_ *= 2;' . "\n";
print "\n";

foreach (@array) {
  $_ *= 2;
}

print "After: @array\n";
print "\n";
#!/bin/perl -w

# bp 104

use strict;

print "\n\n";
print "qw;; does work\n";

print "\n";
print 'my @a = qw;hello world good bye;;' . "\n";
print 'print "[$_]\n" foreach (@a);' . "\n";
print "\n";

my @a = qw;hello world good bye;;

print "[$_]\n" foreach (@a);

print "\n";
#!/bin/perl -w

# bp 68

use strict;

my $i;

print "\ncounting backwards from 100 by 7\n\n";
print 'for ($i = 100; $i >= 0; $i-=7) {' . "\n\n";

for ($i = 100; $i >= 0; $i-=7) {
  print $i . "\t";
}
print "\n\n";
#!/bin/perl -w

# bp 137

print "\n\n";
print '   $x = 10;' . "\n";
print '   access_global();' . "\n";
print '   sub access_global {' . "\n";
print '     print "value of global \$x: $x\n";' . "\n";
print '   }' . "\n";
print "\n";


$x = 10;

access_global();

sub access_global {
  print "value of global \$x: $x\n";
}

print "\n";
#!/bin/perl -w

# bp 138

print "\n\n";
print '   $x = 10;' . "\n";
print '   print "Before: $x";' . "\n";
print '   change_global();' . "\n";
print '   print "After:  $x";' . "\n";
print '   ' . "\n";
print '   sub change_global {' . "\n";
print '     $x = 20;' . "\n";
print '     print "change_global(): $x"' . "\n";
print "\n";


$x = 10;

print "Before: $x\n";
change_global();
print "After:  $x\n";
print "\n";

sub change_global {
  $x = 20;
  print "change_global(): $x\n"
}
#!/bin/perl -w

# bp 139

print "\n\n";
print '   $main::name   = "Your Name Here";' . "\n";
print '   $Fred::name   = "Fred Flintstone";' . "\n";
print '   print "\$name in package main (the default) is $name";' . "\n";
print '   package Fred;' . "\n";
print '   print "\$name in package Fred               is $name";' . "\n";
print "\n";

$main::name   = "Your Name Here";
$Fred::name   = "Fred Flintstone";
$Barney::name = "Barney Rubble";

print "\$name in package main (the default) is $name\n";
package Fred;
print "\$name in package Fred               is $name\n";
package Barney;
print "\$name is package Barney             is $name\n";
package main;
print "\n";
#!/bin/perl -w
# goodnums.pl bp15

print 'print 255, 0377, 0b11111111, 0xFF respectively'."\n";
print 255,		"\n";
print 0377,		"\n";
print 0b11111111,	"\n";
print 0xFF,		"\n";
#!/bin/perl -w

use strict;

print "\n";
print "illustrates branching using goto\n";
print "\n";

my $i = 1;
my $j = 0;

while ($i < 100) {
  $j += 5;
  if ($j > 101) {
   goto ToHigh;
  }
  $i++;
}

goto TheEnd;
ToHigh:
print "\$j > 100\n";
TheEnd:
print "\nWe have reached the end\n";
#!/bin/perl

# bp 54

use strict;

print "\nNo need to chomp the varible holding <STDIN>, as it will be cast as numeric\n\n";

my $target = 12;
print "Guess my number!\n";
print "Enter your guess: ";
my $guess = <STDIN>;

if ($target == $guess) {
  print "That's it! You guessed correctly!\n";
  exit(0);
}
if ($guess > $target) {
  print "Your number is more than my number\n";
  exit(1);
}
if ($guess < $target) {
  print "Your number is less than my number\n";
  exit(1);
}
#!/bin/perl

# bp 61

use strict;

print "\nNo need to chomp the varible holding <STDIN>, as it will be cast as numeric\n\n";

my $target = 12;
print "Guess my number!\n";
print "Enter your guess: ";
my $guess = <STDIN>;

if ($target == $guess) {
  print "That's it! You guessed correctly!\n";
  exit(0);
} elsif ($guess > $target) {
  print "Your number is more than my number\n";
  exit(1);
} elsif ($guess < $target) {
  print "Your number is less than my number\n";
  exit(1);
}
#!/bin/perl -w

# bp 113

use strict;

my $who = "Ian";

print "\n\n";
print '  my %where = (' . "\n";
print '       Gary     => "Dallas",' . "\n";
print "\n";

my %where = (
     Gary     => "Dallas",
     Lucy     => "Exeter",
     Ian      => "Reading",
     Samantha => "Oregon"
);

print '   print "Gary lives in ", $where{Gary}, "\n";' . "\n";
print "Gary lives in ", $where{Gary}, "\n";
print "$who lives in $where{$who}\n";
print "\n";
#!/bin/perl -w

# bp 129

use strict;

sub version {
  print "Beginning Perl's \"Hello, world.\" version 2.0\n";
}

my $option = shift;   # defaults to shifting @ARGV

print "\n\n";
print 'version() if $option eq "-v" or $option eq "--version";' . "\n";
print "\n";

version() if $option eq "-v" or $option eq "--version";

print "Hello, world.\n";

print "\n";
#!/bin/perl
# bp 20

print "\nprint <<EOF\n";
print "\n";
print "This is a here-document.  It starts on the line after the two arrows, \n";
print "and it ends when the test following the arros if found at the beginning \n";
print "of a line, like this:\n";
print "\n";
print "EOF\n";

print <<EOF

This is a here-document.  It starts on the line after the two arrows, 
and it ends when the test following the arros if found at the beginning 
of a line, like this:

EOF

#!/bin/perl -w

# bp 52

use strict;

print "\n";
print "How many-fold a number needs to reach 100\n\n";
print "please enter a number: ";
chomp(my $number = <STDIN>);
my $result = 0;

print 'if ($number != 0) {' . "\n";
print "\n";

if ($number != 0) {
  $result = 100 / $number;
}

print "the result is: $result\n\n";
#!/bin/perl -w

# bp 93

use strict;

my @questions = qw%Java Python Perl C%;
my @punchlines = (
  "None. Change it once, and it's the same everywhere.",
  "One.  He just stands below the socket and the world revolves around him.",
  "A million.  One to change it, the rest to try to do it in fewer lines.",
  '"CHANGE?!"'
);

my $questions = @questions;
print "\n\n";
print "Please enter a number between 1 and $questions: ";
my $selection = <STDIN>;
$selection--;
print "\nHow many $questions[$selection] ";
print "developers does it take to change a lightbulb? \n\n";
sleep 2;
print $punchlines[$selection], "\n\n";
#!/bin/perl -w

# bp 93

use strict;

my @questions = qw<Java Python Perl C>;
my @punchlines = (
  "None. Change it once, and it's the same everywhere.",
  "One.  He just stands below the socket and the world revolves around him.",
  "A million.  One to change it, the rest to try to do it in fewer lines.",
  '"CHANGE?!"'
);

print "\n\n";
print 'foreach (0..$#questions) {' . "\n";
print '  print "How many $questions[$_] ";' . "\n";
print '  print "programmers does it take to change a light bulb?\n";' . "\n";
print '  sleep 2;' . "\n";
print '  print $punchlines[$_], "\n\n";' . "\n";
print '  sleep 1;' . "\n";
print '}' . "\n";
print "\n";

foreach (0..$#questions) {
  print "How many $questions[$_] ";
  print "programmers does it take to change a light bulb?\n";
  sleep 2;
  print $punchlines[$_], "\n\n";
  sleep 1;
}
print "\n";
#!/bin/perl -w

# bp 117

use strict;

print "\n\n"; 
print 'my %where = (' . "\n";
print '	Gary     => "Dallas",' . "\n";
print '	Lucy     => "Exeter",' . "\n";
print '	Ian      => "Reading",' . "\n";
print '	Samantha => "Oregon"' . "\n";
print ');' . "\n";
print "\n"; 
print 'foreach (keys %where) {' . "\n";
print '  print "$_ lives in $where{$_}"' . "\n";
print '}' . "\n";
print "\n"; 


my %where = (
	Gary     => "Dallas",
	Lucy     => "Exeter",
	Ian      => "Reading",
	Samantha => "Oregon"
);

foreach (keys %where) {
  print "$_ lives in $where{$_}\n"
}

print "\n"; 
#!/bin/perl -w

# bp 71

use strict;

print "enter 'done' to break out of the loop\n\n";
print "because of the below condition, there's no chomp here: while (<STDIN>) {\n\n";
print "  last if $_ eq \"done\\n\" \n\n";

while (<STDIN>) {
  last if $_ eq "done\n" ;
  print "You entered: $_";
}

print "All done!\n\n";
#!/bin/perl -w

# bp 95

use strict;

print "\n\n";
print 'my @array = (2, 4, 6, 8);' . "\n";
my @array = (2, 4, 6, 8);

print "The last index, \$#array, is:           ", $#array, "\n";
print "The last element, \$array[\$#array], is: ", $array[$#array], "\n";
my $length = @array;
print "The length is:                         ", $length, "\n";
print "\n";
#!/bin/perl -w

# bp 115

use strict;

print "\n\n";
print 'my %person = (' . "\n";
print '	name  => \'John Doe\',' . "\n";
print '	age   => 39,' . "\n";
print '	phone => \'555-1212\',' . "\n";
print '	city  => \'Chicago\'' . "\n";
print ');' . "\n";
print '' . "\n";
print 'my @data = %person;' . "\n";
print '' . "\n";
print 'print "list context: ", join("|", @data);' . "\n";
print 'print "another way:  ", %person;' . "\n";
print "\n";

my %person = (
	name  => 'John Doe',
	age   => 39,
	phone => '555-1212',
	city  => 'Chicago'
);

my @data = %person;

print "list context: ", join("|", @data), "\n";
print "another way:  ", %person, "\n";
print "\n";
#!/bin/perl - w

# bp 80

use strict;

print "\n";
print 'my @ary = ((1,2),(3,4));' . "\n";
print 'my $elem = $ary[0];' . "\n";
print "\n";

my @ary = ((1,2),(3,4));
my $elem = $ary[0];
print "\@ary first element (\@ary[0]) is $elem\n";

print "\n";
#!/bin/perl -w

# bp 74

use strict;

print "\n";
print '  while ($j <= 5) {' . "\n";
print '    last if $j == 3;' . "\n";
print "\n";

my $i = 1;

while ($i <= 5) {
  my $j = 1;
  while ($j <= 5) {
    last if $j == 3;
    print "$i ** $j = ", $i ** $j, "\n";
    $j++;
  }
  $i++;
}
print "\n";
#!/bin/perl -w

# bp 75

use strict;

print "\n";
print "loop labels\n";
print 'OUTERLOOP: while ($i <= 5) {' . "\n";
print '    last OUTERLOOP if $j == 3; ' . "\n";
print "\n";

my $i = 1;

OUTERLOOP: while ($i <= 5) {
  my $j = 1;
  while ($j <= 5) {
    last OUTERLOOP if $j == 3; 
    print "$i ** $j = ", $i ** $j, "\n";
    $j++;
  }
  $i++;
}
print "\n";
#!/bin/perl -w

# bp 79

use strict;

print "\n";
print "in case you were wondering, perl cmds can be broken into different lines eg.\n";
print 'my ' . "\n";
print '$test = 30;' . "\n";
print "is perfectly legal\n";
print "\n";

my 
$test = 30;

print
  "Here is a list containing strings, (this one) ",
  "numbers (",
  3.6,
  ") and variables: ",
  $test,
  "\n"
;
print "\n";
#!/bin/perl -w

# bp 84

use strict;

my $month = 3;

print "\n";
print 'Note: print "Month " . $month+1   does not work.  Use: print "Month ", $month+1    instead';
print "\n";  print "\n";
print "Month # ", $month+1, " is: ";
print qw(
	January	February	March
	April	May		June
	July	August		September
	October	November	December
        )[$month];
print "\n\n"
#!/bin/perl -w

# bp 86

use strict;

my $mOne;
my $mTwo;

print "\n\n";
print '($mOne,$mTwo) = (1,3);' . "\n";
print 'print(("heads","shoulders","knees","toes")[$mOne, $mTwo]);' . "\n";
print "\n";

($mOne,$mTwo) = (1,3);
print(("heads","shoulders","knees","toes")[$mOne, $mTwo]);

print "\n";
print "\n";
#!/bin/perl -w

# bp 72

use strict;

print "\n'next' exits the body of the loop without exiting the loop itself--press <Ent> at the prompt\n";
print "^z to exit the program\n\n";

print 'if ($_ eq "\n") {' . "\n";
print '  next;' . "\n\n";

print "Please enter some text:\n";
while (<STDIN>) {
  if ($_ eq "\n") {
    next;
  }
  chomp;
  print "You entered: [$_]\n";
}
print "\ninaccessible string\n";
#!/bin/perl
# bp 14

print 'print 25_000_000, " ", -4, "\n"',"\n";
print 25_000_000, " ", -4, "\n";
#!/bin/perl -w
# bp 15

use strict;

print 'print "pi is about ", 3.14159, "\n";',"\n";
print "pi is about ", 3.14159, "\n";
#!/bin/perl -w

# bp 78

use strict;

print "\n";
print 'print(123, 456, 789);' . "\n";
print "\n";

print(123, 456, 789);
print "\n\n";

#!/bin/perl
# bp 21

print "\n".'print "0x30"'."\n";
print "0x30\n";
print "\n";
print 'print "030"'."\n";
print "030\n";
print "\n";
#!/bin/perl
# bp 21

print "\n".'print hex("0x30")' . "\n";
print hex("0x30"), "\n";
print "\n".'print oct("030")' . "\n";
print oct("030"), "\n";
print "\n".'print oct("0b11010")' . "\n";
print oct("0b11010"), "\n";
print "\n";
#!/bin/perl
# bp 21

print "\n" . 'print hex("FFG")' . "\n";
print hex("FFG"), "\n";
print "\n" . 'print oct("178")' . "\n";
print oct("178"), "\n";
print "\n";
#!/bin/perl

# bp 56

use strict;

print "\n" . 'chomp $guess--like all functions, it can take arguments inside parentheses or no' . "\n\n";

print 'if ($password eq $guess) {' . "\n";
print 'if ($password ne $guess) {' . "\n\n";

my $password = "foxtrot";
print "Enter the password: ";
my $guess = <STDIN>;
chomp $guess ;
if ($password eq $guess) {
  print "Pass, friend.\n";
}
if ($password ne $guess) {
  die "go away, imposter!\n"
}
print "\n";
#!/bin/perl
# bp 19

print "\n";

print 'qq|\'"Hi," said Jack. "Have you read /. today?"\'\n|;'."\n";
print qq|'"Hi," said Jack. "Have you read /. today?"'\n\n|;

print 'qq#\'"Hi," said Jack. "Have you read /. today?"\'\n#;'."\n";
print qq#'"Hi," said Jack. "Have you read /. today?"'\n\n#;

print "Note: ( must be closed with ), and < must be closed with >\n\n";

print 'qq(\'"Hi," said Jack. "Have you read /. today?"\'\n);'."\n";
print qq('"Hi," said Jack. "Have you read /. today?"'\n\n);

print 'qq<\'"Hi," said Jack. "Have you read /. today?"\'\n>;'."\n";
print qq<'"Hi," said Jack. "Have you read /. today?"'\n\n>;
#!/bin/perl -w
# bp 17

print '\tThis is a single quoted string.\n';
print "\tThis is a double quoted string.\n";
#!/bin/perl -w
# bp 17

print "\n";
print 'print "C:\\\\WINNT\\\\Profiles\\\\\\n";', "\n";
print "C:\\WINNT\\Profiles\\\n";
print "\n";
print 'print \'C:\WINNT\Profiles\ \'', "\n";
print 'C:\WINNT\Profiles\ ', "\n";
print "\n";
print qq/"'single quotes inside double qoutes (unlike bash)'"/."\n";
print "'single quotes inside double qoutes (unlike bash)'"."\n";
print "\n";
print qq/'"double quotes inside single qoutes"'/."\n";
print '"double quotes inside single qoutes"'."\n";
print "\n";
#!/bin/perl
# bp 18

system("tput clear");

print 'you may do without #!/bin/perl by typing: $ perl quotes3.pl', "\n";

print 'print "It\'s as easy as that.\n"'. "\n";
print "It's as easy as that.\n";
print 'print \'"Stop," he cried.\', "\n";' . "\n";
print '"Stop," he cried.', "\n";
print "\n";
#!/bin/perl
# bp19

print "'\"Hi,\" said Jack, \"Have you read Slashdot today?\"'\n";

print '\'"Hi," said Jack, "Have you read Slashdot today?"\'' . "\n";
#!/bin/perl
# bp 19

print "\n";
print qq#print qq/'"Hi, " said Jack, "Have you read Slashdot today?"'/#;
print "\n";
print qq/'"Hi, " said Jack, "Have you read Slashdot today?"'\n/;
print "\n";
print 'NOTE: qq//I am in a dbl-quote// doesn\'t seem to work'."\n";
print "\n";
#!/bin/perl

#!/bin/perl -w

# bp 81

use strict;

print "\n";
print "Counting up (1 .. 6) : ", (1 .. 6), "\n";
print "Counting down (6 .. 1) : ", (6 .. 1), "\n";
print "Counting down: reverse(1 .. 6) ", reverse(1 .. 6), "\n";
print "\n";

print "Half the alphabet ('a' .. 'm') : ", ('a' .. 'm'), "\n";
print "The other half (backwards) reverse('n' .. 'z') : ", reverse('n' .. 'z'), "\n";
print "\n";

print "Going from 3 to z (3 .. 'z') : ", (3 .. 'z'), "\n";
print "Going from z to 3 ('z' .. 3) : ", ('z' .. 3), "\n";
print "\n";
#!/bin/perl -w

# bp 73

use strict;

print "\n^z to exit program\n";
print "'redo' takes you to the top of the loop without testing the condition\n";
print "\n";

my $number = 10;

while (<STDIN>) {
  chomp;
  print "You entered: $_\n";
  if ($_ == $number) {
    $_++;
    redo;
  }
  print "Going to read the next number now...\n";
}
print "\n";
#!/bin/perl -w

# bp 122

use strict;

print "\n\n"; 
print 'my %where = (' . "\n";
print '	Gary     => "Dallas",' . "\n";
print '	Lucy     => "Exeter",' . "\n";
print '	Ian      => "Reading",' . "\n";
print '	Samantha => "Oregon"' . "\n";
print ');' . "\n";
print "\n"; 
print 'my %who = reverse %where;' . "\n";
print "\n"; 
print 'foreach (keys %who) {' . "\n";
print '  print "$_ lives in $who{$_}"' . "\n";
print '}' . "\n";
print "\n\n"; 


my %where = (
	Gary     => "Dallas",
	Lucy     => "Exeter",
	Ian      => "Reading",
	Samantha => "Oregon"
);

my %who = reverse %where;

foreach (keys %who) {
  print "$_ lives in $who{$_}\n"
}

print "\n"; 
#!/bin/perl -w

# bp 93

use strict;

print "\n\n";
print 'my @array = (1, 3, 5, 7, 9);' . "\n";
print 'my $subscript = 3;' . "\n";
print 'print $array[$subscript];' . "\n";
print "\n";
my @array = (1, 3, 5, 7, 9);
my $subscript = 3;
print $array[$subscript], "\n";

print "\n";
print '$array[$subscript] = 12;' . "\n";
print "\n";
$array[$subscript] = 12;
print $array[$subscript], "\n";
print "\n";
#!/bin/perl -w

# bp 116

use strict;

print "\n\n";
print 'my %person = (' . "\n";
print '	name  => \'John Doe\',' . "\n";
print '	age   => 39,' . "\n";
print '	phone => \'555-1212\',' . "\n";
print '	city  => \'Chicago\'' . "\n";
print ');' . "\n";
print '' . "\n";
print 'my $scalar = %person;' . "\n";
print '' . "\n";
print 'print "scalar context: ", $scalar;' . "\n";
print 'if (%person) {' . "\n";
print '  print "%person has at least one key/value pair\n";' . "\n";
print '} else {' . "\n";
print '  print "%person is empty/n";' . "\n";
print '}' . "\n";
print "\n";

my %person = (
	name  => 'John Doe',
	age   => 39,
	phone => '555-1212',
	city  => 'Chicago'
);

my $scalar = %person;

print "scalar context: ", $scalar, "\n";
if (%person) {
  print "%person has at least one key/value pair\n";
} else {
  print "%person is empty/n";
}
print "\n";
#!/bin/perl -w

# bp 41

print "\n";
print "Note in perl, you can set up any generic code block {}, without any prepositions\n\n";
print "\n";
print "No 'use strict' here\n\n";

$record = 4;
print "Before the block, we're at \$record ", $record, "\n";
{
  my $record;
  $record = 7;
  print "Inside the block, we're at \$record ", $record, "\n";
}

print "After the block, we're still at \$record ", $record, "\n";
print "\n";
#!/bin/perl -w

# bp 41

print "\n";
print "Note in perl, you can set up any generic code block {}, without any prepositions\n\n";
print "\n";
print "'use strict' without global \$record var declaration\n\n";

use strict;

$record = 4;
print "Before the block, we're at \$record ", $record, "\n";
{
  my $record;
  $record = 7;
  print "Inside the block, we're at \$record ", $record, "\n";
}

print "After the block, we're still at \$record ", $record, "\n";
print "\n";
#!/bin/perl -w

# bp 41

print "\n";
print "Note in perl, you can set up any generic code block {}, without any prepositions\n\n";
print "\n";
print "'use strict' with \$record global var declaration\n\n";

use strict;

my $record;

$record = 4;
print "Before the block, we're at \$record ", $record, "\n";
{
  my $record;
  $record = 7;
  print "Inside the block, we're at \$record ", $record, "\n";
}

print "After the block, we're still at \$record ", $record, "\n";
print "\n";
#!/bin/perl -w

# bp 135

use strict;

print "\n\n";
print '   my ($hours, $minutes, $seconds) = secs2hms(3723);' . "\n";
print '   sub secs2hms {' . "\n";
print '     my $seconds = shift;   ## defaults to shifting @_' . "\n";
print '     ...' . "\n";
print '     $seconds %= 60 * 60 ;      ## note the precedence' . "\n";
print '     ...' . "\n";
print '     ($h, $m, $seconds);  ## sub does not exit, but ensure it\'s the last line' . "\n";
print '     }' . "\n";
print "\n";

my ($hours, $minutes, $seconds) = secs2hms(3723);
print "3723 seconds is $hours hours, $minutes minutes and $seconds seconds\n";
print "\n";

sub secs2hms {
  my ($h, $m);
  my $seconds = shift;   ## defaults to shifting @_
  $h = int( $seconds / ( 60 * 60 ) );
  $seconds %= 60 * 60 ;      ## note the precedence
  $m = int( $seconds / 60 );
  $seconds %= 60;
  ($h, $m, $seconds);
#  print "Last line in the sub secs2hms\n";
}
#!/bin/perl -w

# bp 137

use strict;

print "\n\n";
print '   my ($hours, $minutes, $seconds) = secs2hms(3723);' . "\n";
print '   sub secs2hms {' . "\n";
print '     my $seconds = shift;   ## defaults to shifting @_' . "\n";
print '     ...' . "\n";
print '     $seconds %= 60 * 60 ;      ## note the precedence' . "\n";
print '     ...' . "\n";
print '     return ($h, $m, $seconds); ## immediately exits the sub' . "\n";
print '     }' . "\n";
print "\n";

my ($hours, $minutes, $seconds) = secs2hms(3723);
print "3723 seconds is $hours hours, $minutes minutes and $seconds seconds\n";
print "\n";

sub secs2hms {
  my ($h, $m);
  my $seconds = shift;   ## defaults to shifting @_
  $h = int( $seconds / ( 60 * 60 ) );
  $seconds %= 60 * 60 ;      ## note the precedence
  $m = int( $seconds / 60 );
  $seconds %= 60;
  return ($h, $m, $seconds);
  print "This statement is never reached\n";
}
#!/bin/perl -w

# bp 108

use strict;

print "\n\n";

print '  my @array = ();' . "\n";
my @array = ();
print "\n";

print '  unshift @array, "first";' . "\n";
unshift @array, "first";
print "array is now: @array\n";
print "\n";

print '  unshift @array, "second", "third";' . "\n";
unshift @array, "second", "third";
print "Array is now: @array\n";
print "\n";

print '  shift @array;' . "\n";
shift @array;
print "Array is now: @array\n";
print "\n";

#!/bin/perl -w

# bp 108

use strict;

print "\n\n";
my @unsorted = qw'Cohen Clapton Costello Cream Cocteau';
print "Unsorted: @unsorted\n";
print "\n";

print '   my @sorted = sort @unsorted;' . "\n";
print "\n";
my @sorted = sort @unsorted;
print "Sorted:   @sorted\n";   
print "\n";
#!/bin/perl -w

# bp 109

use strict;

print "\n\n";
print '   my @unsorted = (1, 2, 11, 24, 3, 36, 40, 4);' . "\n";
print '   my @sorted = sort(@unsorted);' . "\n";
print "\n";

my @unsorted = (1, 2, 11, 24, 3, 36, 40, 4);
my @sorted = sort(@unsorted);
print "Sorted:  @sorted\n";
print "\n";
#!/bin/perl -w

# bp 109

use strict;

print "\n\n";
print '   my @unsorted = (1, 2, 11, 24, 3, 36, 40, 4);' . "\n";
print "\n";

my @unsorted = (1, 2, 11, 24, 3, 36, 40, 4);

print '   my @string = sort { $a cmp $b } @unsorted;' . "\n";
print "\n";
my @string = sort { $a cmp $b } @unsorted;
print "String sort:  @string\n";
print "\n";

print '   my @number = sort { $a <=> $b } @unsorted;' . "\n";
print "\n";
my @number = sort { $a <=> $b } @unsorted;
print "Numeric sort: @number\n";
print "\n";

#!/bin/perl -w

# bp 106

use strict;

my $hand;
my @pileofpaper = ("letter", "newspaper", "gas bill", "notepad");

print "\n\n";
print "Here's what's on the desk: @pileofpaper\n";

print "You pick something off the top of the pile.\n";
print '  $hand = pop @pileofpaper;' . "\n";
$hand = pop @pileofpaper;
print "You now have a $hand in your hand\n";
print "\n";

print "You put the $hand away, and pick up something else.\n";
print '  $hand = pop @pileofpaper;' . "\n";
$hand = pop @pileofpaper;
print "You picked up a $hand\n";
print "\n";

print "Left on the desk is: @pileofpaper\n";
print "\n";

print "You pick up the next thing, and throw it away.\n";
print '  pop @pileofpaper;' . "\n";
pop @pileofpaper;
print "\n";

print "You put the $hand back onto the pile\n";
print '  push @pileofpaper, $hand;' . "\n";
push @pileofpaper, $hand;
print "\n";

print "You also put a leaflet and a bank statement on the pile.\n";
print '  push @pileofpaper, "leaflet", "bank statement";' . "\n";
push @pileofpaper, "leaflet", "bank statement";
print "\n";

print "left on the desk is: @pileofpaper\n";
print "\n";
#!/bin/perl -w
# bp 33

print "\n'\$ perl -w <filename>.pl' will run the program complete with warnings\n";

print "\n";
print 'print "12 monkeys"    + 0' . "\n";
print "12 monkeys"    + 0, "\n";
print "\n";
print 'print "Eleven to fly" + 0' . "\n";
print "Eleven to fly" + 0, "\n";
print "\n";
print 'print "UB40"          + 0' . "\n";
print "UB40"          + 0, "\n";
print "\n";
print 'print "-20 10"        + 0' . "\n";
print "-20 10"        + 0, "\n";
print "\n";
print 'print "0x30"          + 0' . "\n";
print "0x30"          + 0, "\n";
print "\n";
#!/bin/perl -w
# bp 34

print "\n";
print "Which came first, the chicken or the egg (\"chicken\" cmp \"egg\") ? ";
print "chicken" cmp "egg", "\n";
print "\n";
print "Are dogs greater than cats ('dog' gt 'cat') ? ";
print 'dog' gt 'cat', "\n";
print "\n";
print "Is ^ less than + ('^' lt '+') ? ";
print '^' lt '+', "\n";
print "\n";
#!/bin/perl -w
# bp 35

print "\n";
print 'print "Test one: ", "four" eq "six"' . "\n";
print "Test one: ", "four" eq "six", "\n";
print "\n";
print 'print "Test two: ", "four" == "six"' . "\n";
print "Test two: ", "four" == "six", "\n";
print "\n";
#!/bin/perl -w

# bp 140

use strict;

$x = 10;
print $x;
#!/bin/perl -w

use strict;

print "\n\n";
print '   use strict;' . "\n";
print '   $main::x = 10;  ## legal with explicit package modifier' . "\n";
print "\n";

$main::x = 10;
print $main::x . "\n";
print "\n";
#!/bin/perl
# bp 31

print "\n";
print "Four sevens are (4*7) ", 4*7 , "\n";
print "\n";
#!/bin/perl
# bp 31

print "\n";
print 'print "GO! " x 3', "\n";
print "\n";
print "GO! " x 3, "\n";
print "\n";
#!/bin/perl
# bp 31

print "\n";
print 'print "Ba" . "na" x 4' . "\n";
print "Ba" . "na" x 4, "\n";
print "\n";
#!/bin/perl -w
# bp 31

print "\n";
print 'print "Ba" . "na" x 4*3' . "\n";
print "Ba" . "na" x 4*3, "\n";
print "\n";
print 'print "Ba" . "na" x (4*3)' . "\n";
print "Ba" . "na" x (4*3), "\n";
print "\n";
#!/bin/perl -w

# bp 131

use strict;


print "\n\n";
print 'sub setup;' . "\n";
print 'setup;' . "\n";
print "\n";
print 'sub setup {' . "\n";
print '  print "This is some program, version 0.1\n";' . "\n";
print '}' . "\n";
print "\n";


sub setup;
setup;
print "\n";

sub setup {
  print "This is some program, version 0.1\n";
}

print "Press <Ent> to cont: "; my $cont = <STDIN>;
print "\n================================\n";

print 'use subs qw(note note2);' . "\n";
print 'note;' . "\n";
print 'note2;' . "\n";
print "\n";

use subs qw(note note2);
note;
note2;
sub note { print "generic note\n"; }
sub note2 { print "generic note #2\n"; }
print "\n";

print "Press <Ent> to cont: "; $cont = <STDIN>;
print "\n================================\n";

print 'note3();' . "\n";
print "\n";
note3();
sub note3 { print "generic note #3\n"; }
print "\n";

print "Press <Ent> to cont: "; $cont = <STDIN>;
print "\n================================\n";

print '&note4;' . "\n";
print "\n";
&note4;
sub note4 { print "generic note #4\n"; }
print "\n";
#!/bin/perl -w

# bp 133

use strict;

print "\n\n";
print '   sub total {' . "\n";
print '     $total += $_ foreach @_;' . "\n";
print '   total(111, 107, 105, 114, 69);' . "\n";
print '   total(1..100);' . "\n";
print "\n";

total(111, 107, 105, 114, 69);
total(1..100);
print "\n";

sub total {
  my $total = 0;
  $total += $_ foreach @_;
  print "The total is $total\n";
}
#!/bin/perl -w

# bp 134

use strict;

print "\n\n";
print '   my $sum_of_100 = total(1..100);' . "\n";
print '   sub total {' . "\n";
print '     $total;  ## return value' . "\n";
print "\n";


my $total = total(111, 107, 114, 69);
print "The total is: $total\n";

my $sum_of_100 = total(1..100);
print "The sum of 100 is: $sum_of_100\n";

sub total {
  my $total = 0;
  $total += $_ foreach @_;
  $total;
}
print "\n";
#!/bin/perl

# bp 62

print "\n" . 'unless ($filecount >= 100) {' . "\n";
print '} else {' . "\n\n";

system("ls -l | wc > golf.txt");
my $filecount = 0;
open (F1, "< golf.txt");
while (<F1>) {
  $filecount = $_;
}
print "Enter your file threshold: ";
chomp(my $filethreshold = <STDIN>);

unless ($filecount >= $filethreshold) {
  print "There are less than $filethreshold files in this directory\n"
} else {
  print "There are more than $filethreshold files in this directory\n"
}
print "\n";
#!/bin/perl -w

# bp 67

use strict;

my $countdown = 5;

until ($countdown <= 0) {
  print "Counting down: $countdown\n";
  --$countdown;
}
#!/bin/perl -w

# bp 118

use strict;

print "\n\n"; 
print 'my %where = (' . "\n";
print '	Gary     => "Dallas",' . "\n";
print '	Lucy     => "Exeter",' . "\n";
print '	Ian      => "Reading",' . "\n";
print '	Samantha => "Oregon"' . "\n";
print ');' . "\n";
print "\n"; 
print 'foreach (values %where) {' . "\n";
print '  print "$_ lives in $where{$_}"' . "\n";
print '}' . "\n";
print "\n"; 


my %where = (
	Gary     => "Dallas",
	Lucy     => "Exeter",
	Ian      => "Reading",
	Samantha => "Oregon"
);

foreach (values %where) {
  print "someone lives in $_\n"
}

print "\n"; 
#!/bin/perl -w

# bp 44

use strict;

print "\n";

print 'my $name = "fred"' . "\n";

my $name = "fred";
print "My name is \$name, $name\n";

print "\n";
#!/bin/perl -w

# bp 44

use strict;

print "\n";

print 'my $name = "fred"' . "\n";
my $name = "fred";

print "print 'My name is \\$name, $name\\n'" . "\n";
print 'My name is \$name, $name\n';

print "\n\n";
#!/bin/perl

# bp 45

use strict;

print "\n";
print "note use of prior declared variable in initializing another variable's value\n\n";

print 'my $name = "fred"'."\n";
print 'my $salutation = "Dear $name,"'."\n";

print "\n";

my $name = "fred";
my $salutation = "Dear $name,";
print '$salutation = ' . $salutation, "\n";
print "\n";
#!/bin/perl -w

# bp 45

use strict;

print "\n";
print 'my $times = 8' . "\n";
print 'print "This is the ${times}th time"' . "\n";
print "\n";
my $times = 8;
print "This is the ${times}th time\n\n";
print "\n";
#!/bin/perl

# bp 37

$name = "fred";
print "\n";
print "My name ($name) is ", $name, "\n";
print "\n";
#!/bin/perl

# bp 36

$name = "fred";
print "\n";
print "My name is ",		   $name, "\n";
print "It's still ",		   $name, "\n";
$name = "bill";
print "Well, actually, now it's ", $name, "\n";
$name = "fred";
print "No. really, now it's ",     $name, "\n";
print "\n";
#!/bin/perl -w

# bp 38

print "\nYou can also perl -w <file>\n\n";

print "\n";
$a = 6 * 9;
print "six nines are ", $a, "\n";
$b = $a + 3;
print "Plus three is ", $b, "\n";
$c = $b / 3;
print "All over three is ", $c, "\n";
$d = $c + 1;
print "Add one is ", $d, "\n";
print "Those stages again: ", $a, " ", $b, " ", $c, " ", $d, "\n";
print "\n";
#!/bin/perl -w

# bp 38

print "\nYou can also perl -w <file>\n\n";

print "\n";
$a = 6 * 9;
print "six nines are ", $a, "\n";
$a = $a + 3;
print "Plus three is ", $a, "\n";
$a = $a / 3;
print "All over three is ", $a, "\n";
$a = $a + 1;
print "Add one is ", $a, "\n";
print "Those stages again: ", $a, " ", $a, " ", $a, " ", $a, "\n";
print "\n";
#!/bin/perl -w

# bp 39

print "\nYou can also perl -w <file>\n\n";

print "\n";
$a = 6 * 9;
print "six nines (\$a = 6 * 9) are ", $a, "\n";
$a += 3;
print "Plus three (\$a += 3) is ", $a, "\n";
$a /= 3;
print "All over three (\$a /= 3) is ", $a, "\n";
$a += 1;
print "Add one (\$a += 1) is ", $a, "\n";
$a **= 2;
print "square it (\$a **= 2) is ", $a, "\n";
$a /= 8 - 6; 
print "Note the precedence:  \$a /= 8 - 6  gives you; ", $a, "\n";
print "\n";
#!/bin/perl -w

# bp 60

use strict;

print "\n" . '} elsif ($weather eq "raining") {' . "\n";
print "\n" . '} else {' . "\n\n";

print "What's the weather like outside? ";
chomp(my $weather = <STDIN>);
print "How hot is it, in degrees? ";
chomp(my $temperature = <STDIN>);
print "And how many emails left to reply to: ";
chomp(my $work = <STDIN>);

if ($weather eq "snowing") {
  print "it's snowing, let's go!\n";
} elsif ($weather eq "raining") {
  print "No way, sorry, it's raining so I'm staying in.\n";
} elsif ($temperature < 18) {
  print "Too cold for me!\n";
} elsif ($work > 30) {
  print "Sorry - just too busy.\n";
} else {
  print "Well, why not?\n";
}
print "\n";
#!/bin/perl -w

# bp 64

use strict;

my $countdown = 5;

print "\n";
print 'while ($countdown > 0) {' . "\n\n";

while ($countdown > 0) {
  print "counting down: $countdown\n";
  $countdown--;
}
print "blastoff!\n\n";
#!/bin/perl -w

# bp 65

use strict;

print "\n";
print "\$_ is the default var to hold std input, but the default arg for print & other functs\n\n";
print 'while (<STDIN>) {' . "\n";
print '  print "You Entered: ";' . "\n";
print '  print;' . "\n";
print '}' . "\n\n";

while (<STDIN>) {
  print "You Entered: ";
  print;
}
#!/bin/perl -w

# bp 67

use strict;

print "\nInfinite loop: press ^C to stop\n\n";
print "press <Enter> to continue";
my $pause = <STDIN>;
my $countdown = 5;

while ($countdown > 0) {
  print "counting down: $countdown\n";
}
#!/bin/perl -w

# bp 96

use strict;

my @names = qw|John Joe Mary Sue|;

print "\n\nprocessing using a while loop: while (\$i <= \$#names) {\n";

my $i = 0;
while ($i <= $#names) {
  print "      Hello $names[$i]!\n";
  $i++;
}

print "\nprocessing using a for loop: for (my \$i = 0; \$i <= \$#names; \$i++) {\n";

for (my $i = 0; $i <= $#names; $i++) {
  print "      Hello $names[$i]!\n";
}
print "\n";
